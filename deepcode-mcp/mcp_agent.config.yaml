$schema: ./schema/llm-logger.config.schema.json

execution_engine: asyncio

# 简化的LLM响应日志配置 - 专注于记录LLM回复内容
llm_logger:
  enabled: true
  output_format: "json"  # json, text, markdown
  log_level: "basic"     # basic: 只记录响应内容, detailed: 包含基本信息
  log_directory: "logs/llm_responses"
  filename_pattern: "llm_responses_{timestamp}.jsonl"
  include_models:
    - "claude-sonnet-4"
    - "gpt-4"
    - "o3-mini"
  min_response_length: 50  # 只记录50字符以上的响应


mcp:
  servers:
    brave:
      # On windows replace the command and args line to use `node` and the absolute path to the server.
      # Use `npm i -g @modelcontextprotocol/server-brave-search` to install the server globally.
      # Use `npm -g root` to find the global node_modules path.`
      # command: "node"
      # args: ["c:/Program Files/nodejs/node_modules/@modelcontextprotocol/server-brave-search/dist/index.js"]
      command: "npx"
      args: ["-y", "@modelcontextprotocol/server-brave-search"]
      env:
        # You can also place your BRAVE_API_KEY in the fastagent.secrets.yaml file.
        BRAVE_API_KEY: "BSANqscKbm32rSDleDiDPK6uyFXOHrm"
    filesystem:
      # On windows update the command and arguments to use `node` and the absolute path to the server.
      # Use `npm i -g @modelcontextprotocol/server-filesystem` to install the server globally.
      # Use `npm -g root` to find the global node_modules path.`
      # command: "node"
      # args: ["c:/Program Files/nodejs/node_modules/@modelcontextprotocol/server-filesystem/dist/index.js","./agent_folder"]
      command: "npx"
      args: ["-y", "@modelcontextprotocol/server-filesystem"]
    fetch:
      command: "uvx"
      args: ["mcp-server-fetch"]
    sequential:
      command: "npx"
      args: ["-y","@modelcontextprotocol/server-sequential-thinking"]
    # github:
    #   command: "npx"
    #   args:
    #     - "-y"
    #     - "@modelcontextprotocol/server-github"
    #   env:
    #     GITHUB_TOKEN: "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"
    github-downloader:
      command: "python3"
      args: ["tools/git_command.py"]
      env:
        PYTHONPATH: "."
    file-downloader:
      command: "python3"
      args: ["tools/pdf_downloader.py"]
      env:
        PYTHONPATH: "."
    code-generator:
      command: "python3"
      args: ["tools/code_generator.py"]
      env:
        PYTHONPATH: "."
    command-executor:
      command: "python3"
      args: ["tools/command_executor.py"]
      env:
        PYTHONPATH: "."
    code-implementation:
      command: "python3"
      args: ["tools/code_implementation_server.py"]
      env:
        PYTHONPATH: "."
      description: "论文代码复现工具服务器 - 提供文件操作、代码执行、搜索等功能"
    code-reference-indexer:
      command: "python3"
      args: ["tools/code_reference_indexer.py"]
      env:
        PYTHONPATH: "."
      description: "Code reference indexer server - Provides intelligent code reference search from indexed repositories"

openai:
  # Secrets (API keys, etc.) are stored in an mcp_agent.secrets.yaml file which can be gitignored
  #  default_model: "o3-mini"
  default_model: "gpt-4.1"

anthropic:
  default_model: "claude-sonnet-4-20250514"
  # default_model: "claude-sonnet-3.5-20241022"